// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use glib::{prelude::*, translate::*};
use std::fmt;

glib::wrapper! {
    #[doc(alias = "AtkStreamableContent")]
    pub struct StreamableContent(Interface<ffi::AtkStreamableContent, ffi::AtkStreamableContentIface>);

    match fn {
        type_ => || ffi::atk_streamable_content_get_type(),
    }
}

impl StreamableContent {
    pub const NONE: Option<&'static StreamableContent> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::StreamableContent>> Sealed for T {}
}

pub trait StreamableContentExt: IsA<StreamableContent> + sealed::Sealed + 'static {
    #[doc(alias = "atk_streamable_content_get_mime_type")]
    #[doc(alias = "get_mime_type")]
    fn mime_type(&self, i: i32) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::atk_streamable_content_get_mime_type(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    #[doc(alias = "atk_streamable_content_get_n_mime_types")]
    #[doc(alias = "get_n_mime_types")]
    fn n_mime_types(&self) -> i32 {
        unsafe { ffi::atk_streamable_content_get_n_mime_types(self.as_ref().to_glib_none().0) }
    }

    //#[doc(alias = "atk_streamable_content_get_stream")]
    //#[doc(alias = "get_stream")]
    //fn stream(&self, mime_type: &str) -> /*Ignored*/Option<glib::IOChannel> {
    //    unsafe { TODO: call ffi:atk_streamable_content_get_stream() }
    //}

    #[doc(alias = "atk_streamable_content_get_uri")]
    #[doc(alias = "get_uri")]
    fn uri(&self, mime_type: &str) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::atk_streamable_content_get_uri(
                self.as_ref().to_glib_none().0,
                mime_type.to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<StreamableContent>> StreamableContentExt for O {}

impl fmt::Display for StreamableContent {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("StreamableContent")
    }
}

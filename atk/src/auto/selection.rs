// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files (https://github.com/gtk-rs/gir-files)
// DO NOT EDIT

use crate::Object;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::{boxed::Box as Box_, fmt, mem::transmute};

glib::wrapper! {
    #[doc(alias = "AtkSelection")]
    pub struct Selection(Interface<ffi::AtkSelection, ffi::AtkSelectionIface>);

    match fn {
        type_ => || ffi::atk_selection_get_type(),
    }
}

impl Selection {
    pub const NONE: Option<&'static Selection> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Selection>> Sealed for T {}
}

pub trait SelectionExt: IsA<Selection> + sealed::Sealed + 'static {
    #[doc(alias = "atk_selection_add_selection")]
    fn add_selection(&self, i: i32) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_add_selection(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    #[doc(alias = "atk_selection_clear_selection")]
    fn clear_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_clear_selection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "atk_selection_get_selection_count")]
    #[doc(alias = "get_selection_count")]
    fn selection_count(&self) -> i32 {
        unsafe { ffi::atk_selection_get_selection_count(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "atk_selection_is_child_selected")]
    fn is_child_selected(&self, i: i32) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_is_child_selected(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    #[doc(alias = "atk_selection_ref_selection")]
    fn ref_selection(&self, i: i32) -> Option<Object> {
        unsafe {
            from_glib_full(ffi::atk_selection_ref_selection(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    #[doc(alias = "atk_selection_remove_selection")]
    fn remove_selection(&self, i: i32) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_remove_selection(
                self.as_ref().to_glib_none().0,
                i,
            ))
        }
    }

    #[doc(alias = "atk_selection_select_all_selection")]
    fn select_all_selection(&self) -> bool {
        unsafe {
            from_glib(ffi::atk_selection_select_all_selection(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "selection-changed")]
    fn connect_selection_changed<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn selection_changed_trampoline<
            P: IsA<Selection>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::AtkSelection,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(Selection::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"selection-changed\0".as_ptr() as *const _,
                Some(transmute::<_, unsafe extern "C" fn()>(
                    selection_changed_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<Selection>> SelectionExt for O {}

impl fmt::Display for Selection {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        f.write_str("Selection")
    }
}

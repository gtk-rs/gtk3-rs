initSidebarItems({"fn":[["beep","Emits a short beep on the default display."],["display_arg_name","Gets the display name specified in the command line arguments passed to `gdk_init()` or `gdk_parse_args()`, if any."],["error_trap_pop","Removes an error trap pushed with [`error_trap_push()`][crate::error_trap_push()]. May block until an error has been definitively received or not received from the X server. [`error_trap_pop_ignored()`][crate::error_trap_pop_ignored()] is preferred if you don’t need to know whether an error occurred, because it never has to block. If you don’t need the return value of [`error_trap_pop()`][crate::error_trap_pop()], use [`error_trap_pop_ignored()`][crate::error_trap_pop_ignored()]."],["error_trap_pop_ignored","Removes an error trap pushed with [`error_trap_push()`][crate::error_trap_push()], but without bothering to wait and see whether an error occurred. If an error arrives later asynchronously that was triggered while the trap was pushed, that error will be ignored."],["error_trap_push","This function allows X errors to be trapped instead of the normal behavior of exiting the application. It should only be used if it is not possible to avoid the X error in any other way. Errors are ignored on all [`Display`][crate::Display] currently known to the [`DisplayManager`][crate::DisplayManager]. If you don’t care which error happens and just want to ignore everything, pop with [`error_trap_pop_ignored()`][crate::error_trap_pop_ignored()]. If you need the error code, use [`error_trap_pop()`][crate::error_trap_pop()] which may have to block and wait for the error to arrive from the X server."],["events_get_angle","If both events contain X/Y information, this function will return [`true`] and return in `angle` the relative angle from `event1` to `event2`. The rotation direction for positive angles is from the positive X axis towards the positive Y axis."],["events_get_center","If both events contain X/Y information, the center of both coordinates will be returned in `x` and `y`."],["events_get_distance","If both events have X/Y information, the distance between both coordinates (as in a straight line going from `event1` to `event2`) will be returned."],["events_pending","Checks if any events are ready to be processed for any display."],["flush","Flushes the output buffers of all display connections and waits until all requests have been processed. This is rarely needed by applications."],["list_visuals","Lists the available visuals for the default screen. (See [`Screen::list_visuals()`][crate::Screen::list_visuals()]) A visual describes a hardware image data format. For example, a visual might support 24-bit color, or 8-bit color, and might expect pixels to be in a certain format."],["notify_startup_complete","Indicates to the GUI environment that the application has finished loading. If the applications opens windows, this function is normally called after opening the application’s initial set of windows."],["notify_startup_complete_with_id","Indicates to the GUI environment that the application has finished loading, using a given identifier."],["pango_context_get","Creates a [`pango::Context`][crate::pango::Context] for the default GDK screen."],["pango_context_get_for_display","Creates a [`pango::Context`][crate::pango::Context] for `display`."],["pango_context_get_for_screen","Creates a [`pango::Context`][crate::pango::Context] for `screen`."],["pixbuf_get_from_surface","Transfers image data from a [`cairo::Surface`][crate::cairo::Surface] and converts it to an RGB(A) representation inside a [`gdk_pixbuf::Pixbuf`][crate::gdk_pixbuf::Pixbuf]. This allows you to efficiently read individual pixels from cairo surfaces. For `GdkWindows`, use `gdk_pixbuf_get_from_window()` instead."],["program_class","Gets the program class. Unless the program class has explicitly been set with [`set_program_class()`][crate::set_program_class()] or with the `--class` commandline option, the default value is the program name (determined with `g_get_prgname()`) with the first character converted to uppercase."],["property_delete","Deletes a property from a window."],["property_get","Retrieves a portion of the contents of a property. If the property does not exist, then the function returns [`false`], and `GDK_NONE` will be stored in `actual_property_type`."],["query_depths","This function returns the available bit depths for the default screen. It’s equivalent to listing the visuals ([`list_visuals()`][crate::list_visuals()]) and then looking at the depth field in each visual, removing duplicates."],["selection_convert","Retrieves the contents of a selection in a given form."],["selection_owner_get","Determines the owner of the given selection."],["selection_owner_get_for_display","Determine the owner of the given selection."],["selection_owner_set","Sets the owner of the given selection."],["selection_owner_set_for_display","Sets the [`Window`][crate::Window] `owner` as the current owner of the selection `selection`."],["selection_send_notify","Sends a response to SelectionRequest event."],["selection_send_notify_for_display","Send a response to SelectionRequest event."],["set_allowed_backends","Sets a list of backends that GDK should try to use."],["set_double_click_time","Set the double click time for the default display. See [`Display::set_double_click_time()`][crate::Display::set_double_click_time()]. See also [`Display::set_double_click_distance()`][crate::Display::set_double_click_distance()]. Applications should not set this, it is a global user-configured setting."],["set_program_class","Sets the program class. The X11 backend uses the program class to set the class name part of the `WM_CLASS` property on toplevel windows; see the ICCCM."],["set_show_events","Sets whether a trace of received events is output. Note that GTK+ must be compiled with debugging (that is, configured using the `--enable-debug` option) to use this option."],["shows_events","Gets whether event debugging output is enabled."],["synthesize_window_state",""],["test_render_sync","Retrieves a pixel from `window` to force the windowing system to carry out any pending rendering commands."],["test_simulate_button","This function is intended to be used in GTK+ test programs. It will warp the mouse pointer to the given (`x`,`y`) coordinates within `window` and simulate a button press or release event. Because the mouse pointer needs to be warped to the target location, use of this function outside of test programs that run in their own virtual windowing system (e.g. Xvfb) is not recommended."],["test_simulate_key","This function is intended to be used in GTK+ test programs. If (`x`,`y`) are > (-1,-1), it will warp the mouse pointer to the given (`x`,`y`) coordinates within `window` and simulate a key press or release event."],["text_property_to_utf8_list_for_display","Converts a text property in the given encoding to a list of UTF-8 strings."],["utf8_to_string_target","Converts an UTF-8 string into the best possible representation as a STRING. The representation of characters not in STRING is not specified; it may be as pseudo-escape sequences \\x{ABCD}, or it may be in some other form of approximation."]]});